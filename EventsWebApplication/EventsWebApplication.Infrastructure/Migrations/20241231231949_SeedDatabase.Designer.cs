// <auto-generated />
using System;
using EventsWebApplication.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventsWebApplication.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241231231949_SeedDatabase")]
    partial class SeedDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventsWebApplication.Domain.Entities.Events.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ParticipantsMaxCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Events", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Join us for a day of insightful talks and networking with industry leaders.",
                            EventDateTime = new DateTime(2025, 5, 5, 10, 0, 0, 0, DateTimeKind.Utc),
                            ParticipantsMaxCount = 1000,
                            Title = "Tech Conference 2025"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A beginner-friendly workshop to learn the fundamentals of painting.",
                            EventDateTime = new DateTime(2025, 6, 15, 14, 0, 0, 0, DateTimeKind.Utc),
                            ParticipantsMaxCount = 850,
                            Title = "Art Workshop: Painting Basics"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Local startups pitch their ideas to a panel of investors.",
                            EventDateTime = new DateTime(2025, 7, 20, 18, 30, 0, 0, DateTimeKind.Utc),
                            ParticipantsMaxCount = 320,
                            Title = "Startup Pitch Night"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Get ready for the upcoming marathon with expert-led training.",
                            EventDateTime = new DateTime(2025, 8, 10, 7, 0, 0, 0, DateTimeKind.Utc),
                            ParticipantsMaxCount = 500,
                            Title = "Marathon Training Session"
                        },
                        new
                        {
                            Id = 5,
                            Description = "An evening of stargazing and learning about the cosmos.",
                            EventDateTime = new DateTime(2025, 10, 18, 20, 0, 0, 0, DateTimeKind.Utc),
                            ParticipantsMaxCount = 10,
                            Title = "Astronomy Night"
                        });
                });

            modelBuilder.Entity("EventsWebApplication.Domain.Entities.Participants.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EventRegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Participants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ilya@gmail.com",
                            EventId = 1,
                            EventRegistrationDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Email = "ilya@gmail.com",
                            EventId = 2,
                            EventRegistrationDate = new DateTime(2024, 12, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Email = "ilya@gmail.com",
                            EventId = 3,
                            EventRegistrationDate = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            Email = "ilya@gmail.com",
                            EventId = 4,
                            EventRegistrationDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            Email = "ilya@gmail.com",
                            EventId = 5,
                            EventRegistrationDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            Email = "anna@gmail.com",
                            EventId = 1,
                            EventRegistrationDate = new DateTime(2024, 8, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            Email = "anna@gmail.com",
                            EventId = 3,
                            EventRegistrationDate = new DateTime(2024, 11, 14, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            Email = "dmitry@gmail.com",
                            EventId = 2,
                            EventRegistrationDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            Email = "dmitry@gmail.com",
                            EventId = 4,
                            EventRegistrationDate = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EventsWebApplication.Domain.Entities.Events.Event", b =>
                {
                    b.OwnsOne("EventsWebApplication.Domain.Entities.Events.Category", "Category", b1 =>
                        {
                            b1.Property<int>("EventId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("NormalizedName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");

                            b1.HasData(
                                new
                                {
                                    EventId = 1,
                                    Name = "Technology",
                                    NormalizedName = "TECHNOLOGY"
                                },
                                new
                                {
                                    EventId = 2,
                                    Name = "Art",
                                    NormalizedName = "ART"
                                },
                                new
                                {
                                    EventId = 3,
                                    Name = "Business",
                                    NormalizedName = "BUSINESS"
                                },
                                new
                                {
                                    EventId = 4,
                                    Name = "Sports",
                                    NormalizedName = "SPORTS"
                                },
                                new
                                {
                                    EventId = 5,
                                    Name = "Science",
                                    NormalizedName = "SCIENCE"
                                });
                        });

                    b.OwnsOne("EventsWebApplication.Domain.Entities.Events.Place", "Place", b1 =>
                        {
                            b1.Property<int>("EventId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("NormalizedName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");

                            b1.HasData(
                                new
                                {
                                    EventId = 1,
                                    Name = "Convention Center",
                                    NormalizedName = "CONVENTION CENTER"
                                },
                                new
                                {
                                    EventId = 2,
                                    Name = "Art Studio",
                                    NormalizedName = "ART STUDIO"
                                },
                                new
                                {
                                    EventId = 3,
                                    Name = "Startup Hub",
                                    NormalizedName = "STARTUP HUB"
                                },
                                new
                                {
                                    EventId = 4,
                                    Name = "City Park",
                                    NormalizedName = "CITY PARK"
                                },
                                new
                                {
                                    EventId = 5,
                                    Name = "Observatory",
                                    NormalizedName = "OBSERVATORY"
                                });
                        });

                    b.Navigation("Category");

                    b.Navigation("Place")
                        .IsRequired();
                });

            modelBuilder.Entity("EventsWebApplication.Domain.Entities.Participants.Participant", b =>
                {
                    b.HasOne("EventsWebApplication.Domain.Entities.Events.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EventsWebApplication.Domain.Entities.Participants.Person", "Person", b1 =>
                        {
                            b1.Property<int>("ParticipantId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("BirthdayDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.HasKey("ParticipantId");

                            b1.ToTable("Participants");

                            b1.WithOwner()
                                .HasForeignKey("ParticipantId");

                            b1.HasData(
                                new
                                {
                                    ParticipantId = 1,
                                    BirthdayDate = new DateTime(2004, 9, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                                    Name = "Ilya",
                                    Surname = "Rabets"
                                },
                                new
                                {
                                    ParticipantId = 2,
                                    BirthdayDate = new DateTime(2004, 9, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                                    Name = "Ilya",
                                    Surname = "Rabets"
                                },
                                new
                                {
                                    ParticipantId = 3,
                                    BirthdayDate = new DateTime(2004, 9, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                                    Name = "Ilya",
                                    Surname = "Rabets"
                                },
                                new
                                {
                                    ParticipantId = 4,
                                    BirthdayDate = new DateTime(2004, 9, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                                    Name = "Ilya",
                                    Surname = "Rabets"
                                },
                                new
                                {
                                    ParticipantId = 5,
                                    BirthdayDate = new DateTime(2004, 9, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                                    Name = "Ilya",
                                    Surname = "Rabets"
                                },
                                new
                                {
                                    ParticipantId = 6,
                                    BirthdayDate = new DateTime(1995, 4, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                                    Name = "Anna",
                                    Surname = "Petrova"
                                },
                                new
                                {
                                    ParticipantId = 7,
                                    BirthdayDate = new DateTime(1995, 4, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                                    Name = "Anna",
                                    Surname = "Petrova"
                                },
                                new
                                {
                                    ParticipantId = 8,
                                    BirthdayDate = new DateTime(1988, 12, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                                    Name = "Dmitry",
                                    Surname = "Ivanov"
                                },
                                new
                                {
                                    ParticipantId = 9,
                                    BirthdayDate = new DateTime(1988, 12, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                                    Name = "Dmitry",
                                    Surname = "Ivanov"
                                });
                        });

                    b.Navigation("Event");

                    b.Navigation("Person")
                        .IsRequired();
                });

            modelBuilder.Entity("EventsWebApplication.Domain.Entities.Events.Event", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
